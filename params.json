{"name":"Pytruecrypt","tagline":"Truecrypt volume parsing library","body":"pytruecrypt\r\n===========\r\n  \r\nTruecrypt volume parsing library by originally created by [Gareth Owen](https://github.com/drgowen/), University of Portsmouth, with additional features added by [Adam Swann](https://github.com/4144414d/).\r\n  \r\nLibrary status:\r\n- Decrypts header (can dump raw decrypted header)\r\n- Decodes header fields\r\n- Can dump any decrypted sector\r\n- Hidden volume support\r\n- Veracrypt support\r\n- Can decrypt using only recovered keys (no password required)\r\n- Supports all encryption modes and hash functions offered by Truecrypt\r\n- Can decrypt damaged containers if salt and header keys are recoverable \r\n- Easy to use - see example and source code for API\r\n\r\nExamples:\r\n- dump.py: Header and first sector decrypted hex dump\r\n- image.py: Create decrypted dd image of container\r\n- pw-check.py: Checks password against all available Truecrypt options\r\n- pwcracker.py: Password cracker\r\n- quick-container.py: Produces a working Truecrypt container in seconds\r\n- reserved.py: Hides data within the reserved space of a container\r\n\r\nExample Usage\r\n-------------\r\nBelow are examples on how to use the example scripts.\r\n####dump.py\r\ndump.py will perform a hex dump of the decrypted header and first sector of a container. It also works with hidden volumes if given the -h option. \r\n\r\n    > dump <container>\r\n    > dump example.tc\r\n    > Enter password: password\r\n\t\r\n    HEADER RAW ----------\r\n    0000  54 52 55 45 00 05 07 00 5c 96 e9 4b 00 00 00 00   TRUE.......K....\r\n    0010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0020  00 00 00 00 00 00 00 00 00 0c 00 00 00 00 00 00   ................\r\n    0030  00 02 00 00 00 00 00 00 00 0c 00 00 00 00 00 00   ................\r\n    0040  00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    00a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    00b0  00 00 00 00 00 00 00 00 00 00 00 00 33 73 eb c2   ............3s..\r\n    00c0  12 12 2c ee 8a ff 05 d5 2f ef d3 6e 49 a9 4a bb   ..,...../..nI.J.\r\n    00d0  13 0e 08 f1 3a 93 73 2a 71 86 97 7d 40 70 af 62   ....:.s*q..}@p.b\r\n    00e0  05 8e 6f 27 36 0c 64 06 6e 41 23 8f fe f8 33 65   ..o'6.d.nA#...3e\r\n    00f0  6c 34 f9 54 f1 71 96 f9 36 9e f1 ab 62 75 c6 6b   l4.T.q..6...bu.k\r\n    0100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0110  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0130  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0150  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0170  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0190  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    01a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    01b0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    \r\n    HEADER ------------\r\n    Magic : TRUE\r\n    HdrVersion : 5\r\n    MinProgVer : 7\r\n    CRC : 1553393995\r\n    Reserved :                 \r\n    HiddenVolSize : 0\r\n    VolSize : 786432\r\n    DataStart : 131072\r\n    DataSize : 786432\r\n    Flags : 0\r\n    SectorSize : 512\r\n    Reserved2 :                                                                                                                         \r\n    CRC3 : 863235010\r\n    Keys : 12122cee8aff05d52fefd36e49a94abb130e08f13a93732a7186977d4070af62058e6f27360c64066e41238ffef833656c34f954f17196f9369ef1ab6275c66b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n    \r\n    FIRST SECTOR-------\r\n    0000  eb 3c 90 4d 53 44 4f 53 35 2e 30 00 02 01 02 00   .<.MSDOS5.0.....\r\n    0010  02 00 02 00 06 f8 05 00 01 00 01 00 00 00 00 00   ................\r\n    0020  00 00 00 00 00 00 29 dc 16 81 6a 4e 4f 20 4e 41   ......)...jNO NA\r\n    0030  4d 45 20 20 20 20 46 41 54 31 32 20 20 20 00 00   ME    FAT12   ..\r\n    0040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    00a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    00b0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    00c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    00d0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    00e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    00f0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0110  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0130  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0150  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0170  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    0190  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    01a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    01b0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    01c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    01d0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    01e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n    01f0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 aa   ..............U.\r\n\r\n####image.py\r\nimage is used to image a Truecrypt container for further analysis. The container can be open with a password or with keys extracted from memory.\r\n\r\nEncryption modes can be assigned long or short hand where:\r\n\r\n    aes      = a\r\n    twofish  = t\r\n    serpent  = s\r\n\r\nFor example 'aes-twofish' can be shortened to 'at' and aes-twofish-serpent \r\nto ats. \r\n\r\nSimilarly hash functions can be assigned long or short hand where:\r\n\r\n    ripemd    = r\r\n    sha-512   = s\r\n    whirlpool = w\r\n\r\n#####Example usage:\r\n\r\n    > image pwd <tc> <image> <mode> <password> [<hash>] [-vbh] [(-f -oBYTES -dBYTES)]\r\n    > image key <tc> <image> <mode> [-aKEY -tKEY -sKEY] [(-oBYTES -dBYTES)]\r\n\r\n######Scenario 1:\r\nYou wish to image a Truecrypt file \"input1.tc\" to an image named \"output1.dd\", \r\nit uses aes and ripemd. The password is \"Scenario1\". As ripemd is the default\r\nfor Truecrypt it does not need to be specified.\r\n\r\n    > image pwd input1.tc output1.dd aes Scenario1 \r\n\r\n######Scenario 2:\r\nYou wish to image a Truecrypt file \"input2.tc\" to an image named \"output2.dd\",\r\nit uses aes-serpent and sha512. The password is \"Scenario2\". You wish to save \r\ntime and use the short hand commands.\r\n\r\n    > image pwd input2.tc output2.dd as Scenario2 s\r\n\r\n######Scenario 3:\r\nYou wish to image a Truecrypt file \"input3.tc\" to an image named \"output3.dd\",\r\nit uses aes-serpent. You know it contains a hidden volume and the password is \r\n\"Scenario3\".\r\n\r\n    > image pwd input3.tc output3.dd aes-serpent Scenario3 --hidden\r\n\r\n######Scenario 4:\r\nYou wish to image a Truecrypt file \"input4.tc\" to an image named \"output4.dd\",\r\nit uses aes. You do not know the password but have extracted AES keys from \r\nmemory. \r\n\r\n    > image key input4.tc output4.dd aes --aes bac01155a46547f00c3ddf9a4a765159fbe\r\n    1f68d94bf11a3bd6910eedf26d867a63263c949812cd68b7dad91a8dfdacb96942b93cc1b21ffa\r\n    feeb4791a0befa4\r\n\r\n\r\n####pw-check.py\r\npw-check.py is used to check that a small list of passwords work against a container. It checks all options available in Truecrypt and allows you to confirm that normal and backup headers match. The -d option will print the decoded header to screen if successful, the -v option will also read Veracrypt files.  \r\n\r\n    > pw-check <container> <password>\r\n    > pw-check example.tc password\r\n\tpassword appears to be valid for a Truecrypt standard volume using the normal header using aes and ripemd\r\n\tpassword appears to be valid for a Truecrypt standard volume using the backup header using aes and ripemd\r\n\r\n####pwcracker.py\r\npwcracker.py is an example password cracker for Truecrypt. Simply provide a word list and it will attempt to crack the container.\r\n\r\n    > pwcracker <container> <wordlist>\r\n    > pwcracker example.tc wordlist.txt\r\n    > PW Found: password\r\n\r\n####quick-container.py\r\nquick-container.py produces a Truecrypt container quickly by skipping the first stage encryption setting. This is therefore similar to 'quick format' full disk encryption whereby the free space is not first encrypted. This means a hidden volume is very obvious and it's possible to track the ammount of encrypted data stored within a container. \r\n\r\nThe containers are not formatted and once mounted will require a file system to be created. Containers are always created using AES and ripemd. \r\n\r\n    > quick-container <container> <password> <mb-size>\r\n    > quick-container example password 1024\r\n\t\r\n####reserved.py\r\nreserved.py uses the free space in the Truecrypt header to hide additional data. This data is encrypted with the same password as the container itself. \r\n\r\nTo hide a file:\r\n\r\n    > reserved hide <container> <password> <file>\r\n    > reserved hide example.tc password secret.txt\r\n\t\r\nTo read a hidden file:\r\n\r\n    > reserved check <container> <password>\r\n    > reserved check example.tc password\r\n    > My secret file...\r\n\r\nPrerequisites:\r\n-------------\r\nYou must have pycryptoplus installed - https://github.com/doegox/python-cryptoplus\r\n\r\nFor many examples you must have docopt installed - http://docopt.org/\r\n  \r\nTruecrypt Documentation:\r\n-------------\r\n\r\nVery little as the code is generally compact. See the examples, and pyTruecrypt.py - the comments show how to use it. I am slowly expanding this section. \r\n\r\n###Truecrypt Basics\r\nTruecrypt works in two main ways either as full disk encryption or using\r\nencrypted containers on Windows, Linux, or OSX. On windows it is also\r\npossible to encrypt the operating system with Truecrypt and boot into\r\nwindows. This is not possible on Linux or OSX but it can still use full\r\ndisk encryption on non OS disks.\r\n\r\n###Algorithms\r\nTruecrypt allows the following encryption schemes all working in XTS\r\nmode. Where more than one encryption algorithm is used the data is\r\nencrypted with each algorithm using different master keys.\r\n\r\n- AES (default)\r\n- Serpent\r\n- Twofish\r\n- AES - Twofish\r\n- AES - Twofish - Serpent\r\n- Serpent - AES\r\n- Serpent - Twofish - AES\r\n\r\nThree hash algorithms are available, these are:\r\n\r\n- RIPEMD (default)\r\n- SHA-512\r\n- WHIRLPOOL\r\n\r\n\r\n###Encryption in Truecrypt\r\n\r\nTruecrypt uses each of the different encryption algorithms in XTS mode.\r\nIn short this means that same plain text data encrypted with the same\r\nkey but in a different location will produce a different cipher text.\r\nFor example a completely zeroed disk encrypted with XTS mode would look\r\ncompletely random, each sector of zeros produces a different sector of\r\nencrypted data. If ECB mode was used instead you would see a repeating\r\npattern where each sector of zeros produced the same sector of encrypted\r\ndata.\r\n\r\nTruecrypt stores the master keys within the Truecrypt header and these\r\nkeys are not generated based on the password chosen for the container.\r\nInstead the master keys are generated randomly when the container is\r\ncreated and stored in the header, the header is then encrypted using the\r\npassword provided for by the user. Only by knowing the password to the\r\nheader can you successfully decrypt the header and get to the master\r\nkeys to decrypt the data.\r\n\r\nThis allows the user to change the password to a container. Rather then\r\nneeding to re-encrypt the whole container only the headers need to be\r\nre-encrypted with the new password, the master keys remain the same.\r\n\r\nThis raises the obvious risk, if an attacker can decrypt the header at\r\nany point in time they can use the master keys to decrypt data. I.E. A\r\ncontainer is created with a simple password, the attacker cracks this \r\npassword and stores the master keys. Later the users changes the password\r\nto the container in an effort to increase security, however the attacker \r\nalready has the master keys and as such can decrypt the container. \r\n\r\n\r\n###Volumes\r\n\r\nTrueCrypt allows the user to have a normal volume and a hidden volume.\r\nThe normal volume is designed to be well encrypted but if the TrueCrypt\r\nvolume is detected you would not be able to plausibly deny its\r\nexistence, and so rubber hose cryptanalysis could be used to get the\r\npassword from you. The hidden volume on the other hand is designed to\r\nhide within the normal volume and would look like any other section of\r\nrandom data, allowing you to plausibly deny it being there.\r\n\r\nThe layout of a container is shown in below. The first 256 sectors store \r\nthe main headers, while the last 256 sectors store the backup headers \r\nshould the main headers be damaged. Everything in-between is the data \r\nsection of the container and will store the actual user data.\r\n\r\nAlmost everything within the container is encrypted so normal analysis\r\nof the file will simply show ‘random’ data. Only the salts for each of\r\nthe headers are store in a decrypted form, however these are simply 64\r\nbits of random data so should be impossible to tell them apart.\r\n\r\nThe normal and backup headers contain the same decrypted data however\r\nthey are encrypted with different salts. This means they will appear to\r\nbe completely different on the binary level.\r\n\r\nThe space in the headers (254 sectors in total) is seeded with random\r\ndata when the container is first created. This is one of the main\r\nreasons it’s difficult to detect a hidden volume, with or without one\r\nthis sector will seemingly contain random data.\r\n\r\n![Truecrypt Layout](https://raw.githubusercontent.com/4144414D/pytruecrypt/gh-pages/images/container-layout.png)\r\n\r\n###Truecrypt Header v5\r\n\r\nTruecrypt 7.1a uses the header version 5. This header is the same for\r\nnormal and hidden volumes and system encryption, the difference is\r\nsimply their location and flag bits.\r\n\r\n####Header Elements\r\n\r\n**1)  Salt - 64 Bytes**\r\n\r\nThe salt is used when encrypting the header. This is randomly generated data and so will look as if it’s encrypted.\r\n\r\n**2)  File Signature - 4 Bytes**\r\n\r\nThe ASCII string ‘TRUE’. This is used to check if the header has been decrypted correctly.\r\n\r\n**3)  Header Version - 2 Bytes**\r\n\r\nThe version of Truecrypt header in use, for 7.1a this will always be \\x00\\x05.\r\n\r\n**4)  Truecrypt Version - 2 Bytes**\r\n\r\nThe minimum version of Truecrypt needed to use the volume. For 7.1a this is always be [\\\\x00\\\\x07](\\x00\\x07).\r\n\r\n**5)  Key CRC - 4 Bytes**\r\n\r\nCRC32 value for the bytes 256-511 of the header. I.E. the master keys. This is also used to confirm if the Truecrypt header has been decrypted correctly.\r\n\r\n**6)  Reserved Space - 16 Bytes**\r\n\r\n16 Bytes of \\x00 which aren’t used in the header.\r\n\r\n**7)  Size of Hidden Volume - 8 Bytes**\r\n\r\nThe size in bytes of the hidden volume. This is set to zero in a non-hidden volume.\r\n\r\n**8)  Size of Hidden Volume - 8 Bytes**\r\n\r\nThe size in bytes of the volume.\r\n\r\n**9)  Offset to Data - 8 Bytes**\r\n\r\nThe is the byte offset from the start of the data. If this header is for a normal (non-hidden) container this should be \\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00. This is 131072 bytes, or sector 256.\r\n\r\n**10) Size of Data - 8 Bytes**\r\n\r\nThe total size in bytes of the data portion of the container.\r\n\r\n**11) Flag Bits - 4 Bytes**\r\n\r\nUsed to determine what type of container is in use. Bit 0 is set for system encryption, while bit 1 is set for non-system in place encryption. The other bits are not used.\r\n\r\n**12) Reserved Space - 120 Bytes**\r\n\r\nFurther space in the header which isn’t used.\r\n\r\n**13) Header CRC - 4 Bytes**\r\n\r\nA CRC32 value for the bytes 64-251 of the header.\r\n\r\n**14) Master Keys - 64 Bytes each**\r\n\r\nThe remaining space is devoted to the master keys. If multiple encryption algorithms are used then multiple keys will be present.\r\n\t\r\n![Truecrypt Header](https://raw.githubusercontent.com/4144414D/pyTruecrypt/gh-pages/images/header-layout.png)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}